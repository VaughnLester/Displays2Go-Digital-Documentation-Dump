const http = require('http');   
const mysql = require('mysql2');
const urI = require('url'); 
const fs = require('fs'); 
const querystring = require('node:querystring');

const server = http.createServer((request, response)=>{
switch (request.url){
    case '/newSKU':
        let body = '';
        request.on('data', chunk =>{ 
            body += chunk.toString();
        });
        request.on('end', ()=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});   
            const newSKU = JSON.parse(JSON.stringify(querystring.parse(body))).newSKU; 
            connection.query(`CREATE TABLE ${newSKU} (entryID int NOT NULL AUTO_INCREMENT, Title varchar(255), Entry varchar(255) NOT NULL, PRIMARY KEY (entryID));`, (err, results) =>{
                if (err) {
                    console.log("error inserting data into database "+ err); return;  
                }
                else {
                console.log(`Created sku ${newSKU} successfully`);
                }
            })
            response.end(`Received data: ${JSON.stringify(parsedData)}`);
        });
        break;
    case '/addEntry':
        let body2 = '';
        request.on('data', chunk =>{ 
        body2 += chunk.toString();
        });
        request.on('end', ()=>{
        response.writeHead(200, {  
        'Content-Type': 'text/html',
        'Access-Control-Allow-Origin' : '*'});
        const existingSKU = JSON.parse(JSON.stringify(querystring.parse(body))).existingSKU;
        const title = JSON.parse(JSON.stringify(querystring.parse(body))).title;
        const entry = JSON.parse(JSON.stringify(querystring.parse(body))).entry;
        connection.query(`INSERT INTO ${existingSKU} (Title, Entry) VALUES ("${title}", "${entry}")`, (err, results) =>{
        if (err) {console.log("error inserting data into database "+ err); return;}
        else {
        console.log(existingSKU + " updated!");}
        })
        response.end(existingSKU + " updated: " + title + ", " + entry);
        });
        break;
    case "/allSKUs":
        connection.query('SHOW TABLES;', (err,results) =>{
            if (err){ 
            response.writeHead(200, {
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            response.end('error fetching data');
            return;
            }
            response.writeHead(200, { 
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            response.write(readTables(JSON.parse(JSON.stringify(results))));
            response.end();
            });
        break; 
    default:
    response.writeHead(200, {
    'Content-Type': 'text/html',
    'Access-Control-Allow-Origin' : '*'});
    fs.createReadStream('index.html').pipe(response);
    fs.readFile('index.html', function(err, content){
        if (err){console.log("error occurred trying to send html file"); response.end}
        else {
        response.end(content);
        }
        })
}

switch(urI.parse(request.url, true).pathname){
    case "/skuPage":
        let body = " ";
        request.on('data', chunk => {body += chunk.toString()})
        request.on('end', ()=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});    
            const searchParams = new URLSearchParams(urI.parse(request.url, true).search);        
            const skuPage = searchParams.get('skuPage');
            connection.query(`SELECT * FROM ${skuPage}`, (err, results) =>{
            if (err) {console.log("error inserting data into database "+ err); return;}
            else {
            response.end("Table Name: " + skuPage + readRows(JSON.parse(JSON.stringify(results))));
            }
            })
            })
        break;
    case "/deleteSKU":
        let body2 = "";
        request.on('data', chunk => {body2 += chunk.toString()})
        request.on('end', ()=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            const deleteSKU = JSON.parse(JSON.stringify(querystring.parse(body2))).deleteSKU;
            connection.query(`DROP TABLE ${deleteSKU}`, (err, results) =>{
            if (err) {console.log("error inserting data into database "+ err); return;}
            else {
            response.end("Table Name: " + deleteSKU + " is deleted");
            }
            })
            })
        break;
    case "/deleteSkuEntry":
        let deleteBody = "";
        request.on('data', chunk => {deleteBody += chunk.toString()})
        request.on('end', ()=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            connection.query(`DELETE FROM ${JSON.parse(JSON.stringify(querystring.parse(deleteBody))).sku} WHERE Title='${JSON.parse(JSON.stringify(querystring.parse(deleteBody))).deleteSkuEntry}'`, (err, results) =>{
            if (err) {console.log("error updating entry in SKU "+ err); return;}
            else {
            console.log("SKU entry deleted " + results);
            }
            })
            })
        break;
    case "/skuUpdateEntry":
        let body3 = "";
        request.on('data', chunk => {body3 += chunk.toString()})
        request.on('end', ()=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            connection.query(`UPDATE ${JSON.parse(JSON.stringify(querystring.parse(body))).skuNameUpdate} SET entry = "${JSON.parse(JSON.stringify(querystring.parse(body))).entryUpdate}" WHERE title = "${JSON.parse(JSON.stringify(querystring.parse(body))).title}"`, (err, results) =>{
            if (err) {console.log("error updating entry in SKU "+ err); return;}
            else {
            console.log("SKU entry update successful! " + results);
            }
            })
            })
        break;
    case "/changeSkuName":
        let body4 = "";
        request.on('data', chunk => {body4 += chunk.toString()})
        request.on('end', ()=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            connection.query(`RENAME TABLE ${JSON.parse(JSON.stringify(querystring.parse(body))).sku} to ${JSON.parse(JSON.stringify(querystring.parse(body))).changeSkuName}`, (err, results) =>{
            if (err) {console.log("error inserting data into database "+ err); return;}
            else {
            console.log(JSON.parse(JSON.stringify(querystring.parse(body))).sku + " changed to " + JSON.parse(JSON.stringify(querystring.parse(body))).changeSkuName);
            }
            })
            })
        break;
    case "/confirmation":
        response.writeHead(200, {
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});//enables CORS
            fs.readFile('confirmation.html', function(err,content){
            if(err){
            console.log(err);
            response.end;
            }
            else{
            response.end(content);
            }
            })
        break;
    default:
        response.writeHead(200, {
        'Content-Type': 'text/html',
        'Access-Control-Allow-Origin' : '*'});
        fs.createReadStream('index.html').pipe(response);
        fs.readFile('index.html', function(err, content){
            if (err){console.log("error occurred trying to send html file"); response.end}
            else {
            response.end(content);
            }
            })
}
})

//creating database connection
const connection = mysql.createConnection({
host:'sql5.freesqldatabase.com',
user: 'sql5768538',
password: '9np9VjdEks',
database: 'sql5768538'
});

//connecting database
connection.connect(function(err)
{
if (err){console.log("error occurred while attempting connection: ", err)}
else {console.log("database connection successful!")}
}
);

//connecting server
server.listen(5001, console.log("server is listening on 5001"));



//function :
//grab data from each row in database
function readRows(arr){
    let max = arr.length -1;
    let results = ' ';
    while (max > -1){
    results += `${arr[max].idTest} ${arr[max].text}, `
    max--;
    }
    return results;
}
//read each table 
function readTables(arr){
    let max = arr.length -1;
    let results = ' ';
    while (max > -1){
    results += `${arr[max].Tables_in_sql5768538}, `;
    //add link event listener -> goes to path that opens the table
    
    max--;
    }
    return results;
}