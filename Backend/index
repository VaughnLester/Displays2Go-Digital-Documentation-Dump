const http = require('http'); 
const mysql = require('mysql2'); 
const urlParsing = require('url'); 
const fs = require('fs'); 
const formidable = require('formidable');
const { Blob } = require('buffer');
const { Buffer } = require('node:buffer');

//SERVER API
const server = http.createServer((request, response)=>{
    const url = request.url;
    const parsedUrl = urlParsing.parse(url, true)

    //newSKU
    if (url == "/newSKU"){
        const newSKU = new formidable.IncomingForm(); 
        newSKU.parse(request, (err, fields, files) =>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            connection.query(`CREATE TABLE ${fields.sku[0]} (entryID int NOT NULL AUTO_INCREMENT, Title varchar(255) UNIQUE, Entry varchar(255) NOT NULL, FileName varchar(255) UNIQUE,
                OriginalFileName varchar(255), File LONGBLOB, PRIMARY KEY (entryID));`, (err, results) =>{
                if (err){response.end("Entry must not be only numbers! " + err.toString()); return;}
                else {response.end(`${fields.sku[0]} added to database! <br><br><a href="/home">Home</a>`);}
            })
        })  
    }

    //addEntry
    else if (url == "/addEntry"){
        const addEntry = new formidable.IncomingForm();
        addEntry.parse(request, (err,fields,files)=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            if(err){response.end(err)}
            fields.title[0] = fields.title[0].replace('"','');
            fields.title[0] = fields.title[0].replace('\\\\','');
            fields.skuEntry[0] = fields.skuEntry[0].replace('"','');
            fields.skuEntry[0] = fields.skuEntry[0].replace('\\\\','');
            connection.query(`INSERT INTO ${fields.sku[0]} (Title, Entry) VALUES ("${fields.title[0]}", "${fields.skuEntry[0]}")`, (err, results) =>{
            if (err) {response.end(err.toString()); return;}
            else {response.end(`Entry ${fields.title[0]} added to ${fields.sku[0]}!<br><br><a href="/home">Home</a>`);}})
        })
    }

    //File Handler: upload files
    else if (url == "/upload"){        
        const form = new formidable.IncomingForm(); 
        form.parse(request, (err, fields, files)=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            if(err){response.end("error parsing the file: "+err); return;}
            if(!files.filetoupload){response.end("no file uploaded");return;}
            fs.readFile(files.filetoupload[0].filepath,(err,data) => {
                if(err){response.end(err.toString()); console.log(err);return;}
                fields.originalfileName[0] = fields.originalfileName[0].replace('"', '');
                fields.originalfileName[0] = fields.originalfileName[0].replace('\\\\', '');
                connection.query(`INSERT INTO ${fields.sku[0]} (FileName, OriginalFileName, File) VALUES ("${fields.originalfileName[0]}", "${files.filetoupload[0].originalFilename}", ?)`, [data], (err, results)=>{//only works with data in this parameter(not sure why)
                    if(err){response.end(err.toString()); console.log(err); return;}
                    response.end(`${fields.originalfileName[0]} uploaded to sku ${fields.sku[0]} and saved to database!<br><br><a href="/home">Home</a>`);
                });
            })
        })
    }

    //deleteSKU 
    else if (url == "/deleteSKU"){
        const deleteSKU = new formidable.IncomingForm();
        deleteSKU.parse(request,(err, fields, files) =>{
             response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'}); 
            if(err){response.end("error submitting form: "+err); return}     
            connection.query(`DROP TABLE ${fields.sku[0]}`, (err, results) =>{
            if (err) {response.end("Entry must not be only numbers! " +err.toString());return;}
            else {response.end(`${fields.sku[0]} deleted from database!<br><br><a href="/home">Home</a>`);}})
        })
    }

    //deleteData
    else if (url == "/deleteData"){
        const deleteData = new formidable.IncomingForm();
        deleteData.parse(request,(err,fields,files)=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            if(err){response.end(err.toString()); return;}
            fields.title[0] = fields.title[0].replace('"','');
            fields.title[0] = fields.title[0].replace('\\\\','');
            connection.query(`DELETE FROM ${fields.sku[0]} WHERE title = "${fields.title[0]}"`, (err, results) =>{
                if (err) {response.end(err.toString()); return;}
                else {response.end(`${fields.title[0]} deleted from ${fields.sku[0]}! (If entry exists)<br><br><a href="/home">Home</a>`);}
            })
        })
    }

    //deleteFile
    else if (url == "/deleteFile"){
        const deleteData = new formidable.IncomingForm();
        deleteData.parse(request,(err,fields,files)=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            if(err){response.end(err.toString()); return;}
            fields.fileName[0] = fields.fileName[0].replace('"','');
            fields.fileName[0] = fields.fileName[0].replace('\\\\','');
            connection.query(`DELETE FROM ${fields.sku[0]} WHERE FileName = "${fields.fileName[0]}"`, (err, results) =>{
                if (err) {response.end(err.toString()); return;}
                else {response.end(`${fields.fileName[0]} deleted from ${fields.sku[0]}! (If file exists)<br><br><a href="/home">Home</a>`);}
            })
        })
    }

    //changeSKU
    else if (url == "/changeSKU"){
        const changeSKU = new formidable.IncomingForm();
        changeSKU.parse(request, (err,fields,files)=>{
        response.writeHead(200, {  
        'Content-Type': 'text/html',
        'Access-Control-Allow-Origin' : '*'});
        if(err){response.end(err)};
        connection.query(`RENAME TABLE ${fields.sku[0]} to ${fields.newSKU[0]}`, (err, results) =>{
            if (err) {response.end("Entry must not be only numbers! " +err.toString()); return;}
            else {response.end(`${fields.sku[0]} changed to ${fields.newSKU[0]}!<br><br><a href="/home">Home</a>`);}})
        })
    }

    //updateTitle
    else if (url == "/updateTitle"){
        const updateTitle = new formidable.IncomingForm();
        updateTitle.parse(request, (err,fields,files)=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            if(err){response.end(err.toString()); return;}
            fields.title[0] = fields.title[0].replace('"','');
            fields.title[0] = fields.title[0].replace('\\\\','');
            connection.query(`UPDATE ${fields.sku[0]} SET title = "${fields.updatedTitle[0]}" WHERE title = "${fields.title[0]}"`, (err, results) =>{if(err){response.end(err.toString()); return;}
            else {response.end(`Entry "${fields.title[0]}" in SKU ${fields.sku[0]} has been updated to "${fields.updatedTitle[0]}"! (If entry exists)<br><br><a href="/home">Home</a>`);}})
        })
    }

    //updateEntry
    else if (url == "/updateEntry"){
        const updateEntry = new formidable.IncomingForm();
        updateEntry.parse(request,(err,fields,files)=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            if(err){response.end(err.toString())}
            fields.title[0] = fields.title[0].replace('"','');
            fields.title[0] = fields.title[0].replace('\\\\','');
            fields.skuEntry[0] = fields.skuEntry[0].replace('"','');
            fields.skuEntry[0] = fields.skuEntry[0].replace('\\\\','');
            connection.query(`UPDATE ${fields.sku[0]} SET entry = "${fields.skuEntry[0]}" WHERE title = "${fields.title[0]}"`, (err, results) =>{
                if (err) {response.end(err.toString()); return;}
                else {response.end(`Entry details for "${fields.title[0]}" in SKU ${fields.sku[0]} have been updated! (If entry exists)<br><br><a href="/home">Home</a>`);}
            })
        })
    }


    //File Handler: Upldate 
    // upload files
    else if (url == "/uploadUpdate"){        
        const form = new formidable.IncomingForm(); 
        form.parse(request, (err, fields, files)=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            if(err){response.end("error parsing the file: "+err); return;}
            if(!files.filetoupload){response.end("no file uploaded");return;}
            fs.readFile(files.filetoupload[0].filepath,(err,data) => {
                if(err){response.end(err.toString()); console.log(err);return;}
                fields.originalfileName[0] = fields.originalfileName[0].replace('"', '');
                fields.originalfileName[0] = fields.originalfileName[0].replace('\\\\', '');
                connection.query(`UPDATE ${fields.sku[0]} SET File = ? WHERE FileName = "${fields.originalfileName}"`, [data], (err, results)=>{//only works with data in this parameter(not sure why)
                    if(err){response.end(err.toString()); console.log(err); return;}
                    response.end(`${fields.originalfileName} updated to ${files.filetoupload[0].originalFilename} in sku ${fields.sku[0]}! (If it exists)<br><br><a href="/home">Home</a>`);
                });
            })
        })
    }

    //database pull - used to list all tables in datbase.html file
    else if (url == "/databasePull"){
        connection.query('SHOW TABLES;', (err,results) =>{ 
            response.writeHead(200, {
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            if (err){response.end(err.toString()); return;}
            else{
                jsonString = JSON.stringify(results);
                jsonObject = JSON.parse(jsonString);
                response.write(readTables(jsonObject));
                response.end();
            }
        });
    }

    //database - returns databse.html file to frontend
    else if (url == "/database"){
        response.writeHead(200, {
        'Content-Type': 'text/html',
        'Access-Control-Allow-Origin' : '*'});
        fs.readFile('database.html', function(err,content){
        if(err){response.end(err.toString());return;}
        else{response.end(content);}
        })
    }

    //table - attaches to table list as a link per table that selects all from the table, in database.html file 
    else if (parsedUrl.pathname == "/table"){
        let body = " ";
        request.on('data', chunk => {body += chunk.toString()})
        request.on('end', ()=>{
            response.writeHead(200, {  
            'Content-Type': 'text/html',
            'Access-Control-Allow-Origin' : '*'});
            const searchParams = new URLSearchParams(parsedUrl.search);   
            const tableName = searchParams.get('name');
            connection.query(`SELECT * FROM ${tableName}`, (err, results) =>{
            if (err) {response.end("error inserting data into database "+ err); return;}
            else {
            //defining the array from all tables
            jsonString = JSON.stringify(results)
            jsonObject = JSON.parse(jsonString)

            //Function to grab raw image data for sku photo
            function getBase64Data(){
            let blobData = '';
            let max = jsonObject.length -1;
            while (max > -1){
                if (jsonObject[max].FileName !== null){
                    if(jsonObject[max].FileName == "Product Image"){
                        blobData = jsonObject[max].File;
                        //converting raw image blob to base64 string to display in browser
                        const bufferFromString = Buffer.from(blobData.data, 'utf8');
                        const base64String1 = bufferFromString.toString('base64'); 
                        return base64String1;
                    }
                }
                max--;
                }
            }

            response.end(`    
            <!DOCTYPE html>
            <html>
                <head>
                    <title>Database: ${tableName}</title>
                </head>
                <a href="/home">Home |
                <a href="/database">Full Database</a>
                <body>
                    <h1>${tableName}</h1>
                    <img src="data:image/png;base64,${getBase64Data()}"/>
                    <ul id="myList2"></ul>
                    ${readRows(jsonObject, tableName)} 
                    <br><br><a href="/home">Home |
                    <a href="/database">Full Database</a>
                </body>
                <script>
                    
                </script>
            </html>`);
        }})})
    }

    //File Handler: reads files that are attached to each SKU 
    else if (url.includes("/read")){
        const params = new URLSearchParams(url);
        connection.query(`SELECT * FROM ${params.get('table')} WHERE OriginalFileName = "${params.get('filename')}"`, (err, results) =>{
        if (err) {console.log(err); return;}
        else {
            async function blobToFile(blob, fileName) {
            const arrayBuffer = await blob.arrayBuffer();
            const buffer = Buffer.from(arrayBuffer);
            if((fileName.includes(".docx"))|fileName.includes(".xlsx")){
                response.writeHead(200, {
                    "Content-Type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "Content-Length": Buffer.byteLength(buffer),
                    "Content-disposition": `attachment; filename=${fileName}`
                });
                    response.end(buffer)
                }
                else{response.end(buffer);}
            }
            async function example() {
                try{
                    const blob = new Blob([results[0].File], { type: "application/pdf" });
                    await blobToFile(blob, results[0].OriginalFileName);
                } catch (error) {response.end(error.toString()); return;}
            }
            example();
        }})
    }

    //If no route is found, defaults to returning index.html 
    else {
        response.writeHead(200, {
        'Content-Type': 'text/html',
        'Access-Control-Allow-Origin' : '*'});//enables CORS
        //fs.createReadStream('index.html').pipe(response);
        fs.readFile('index.html', function(err, content){
        if (err){console.log("error occurred trying to send html file"); response.end("error fetching index.html home file")}
        else {
            response.end(content);
        }})
    }
});//end server

//creating database connection, hosted on freesqldatabase.com
const connection = mysql.createConnection({
host:'sql5.freesqldatabase.com',
user: 'sql5768538',
password: '9np9VjdEks',
database: 'sql5768538'
});

//connecting database
connection.connect(function(err){
    if (err){console.log("error occurred while attempting connection: ", err)}
    else {console.log("database connection successful!")}
});

//connecting server
server.listen(5001, console.log("server is listening on 5001"));


//-------------------------------------------------------------------
//functions used:
//grab data from each row in database, add list item HTML

//Everything works perfectly for uploading files, now just edit so each file has a label that is displayed next to it, which is the descriptive file name - do this first by adding another column to the table for file label, then pulling that column for each file pull and adding it to display with the file name which is already perfectly linked - do not need the file itself to display!!!
function readRows(arr,sku){
    let max = arr.length -1;
    let results = ' ';
    while (max > -1){
    //normal line for all sku table, temp disabled for testing
    //results += `<li>${arr[max].Title}: ${arr[max].Entry}</li> `
    if (arr[max].File !== null){results += `<li>${arr[max].FileName}: <a href="/read?sku=${sku}&filename=${arr[max].OriginalFileName}&table=${sku}">${arr[max].OriginalFileName}</a></li> `;}
    else{results += `<li>${arr[max].Title}: ${arr[max].Entry}</li> `;}
    
    //new line for testing file table - temp testing
    // results += 
    // `<li>${arr[max].filename}: ${arr[max].data}</li>`


      max--;
    }
    return results;
}
//read each table 
function readTables(arr){
    let max = arr.length -1;
    let results = ' ';
    while (max > -1){
    results += `${arr[max].Tables_in_sql5768538}, `;
    //add link event listener -> goes to path that opens the table
    
    max--;
    }
    return results;
}


